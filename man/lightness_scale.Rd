% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scale_lightness.R
\name{lightness_scale}
\alias{lightness.colors}
\alias{lightness_colors}
\alias{lightness_map}
\alias{lightness_palette}
\alias{lightness_scale}
\title{Lightness scale and palette}
\usage{
lightness_scale(l = c(0, 0.9), c = 0.5, h = 0, domain = c(0, 1),
  reverse = FALSE)

lightness_map(x, ...)

lightness_palette(...)

lightness_colors(n, ...)

lightness.colors(n, ...)
}
\arguments{
\item{l}{lightness, number in \code{[0, 1]}; 0 is darkest, 1 is brightest.}

\item{c}{chromacity, number in \code{[0, ~1]}; 0 is grey, ~1 is full color.}

\item{h}{hue, either an angle around the color wheel, in \code{[0, 360]} (angles outside of the range are rotated back to within \code{[0, 360]}: 380 = 20, -15 = 345, etc.), or a color (hex or named) from which the hue is extracted (by function \code\link{hue}).}

\item{domain}{the values between which the scale is computed.}

\item{reverse}{whether to reverse the order of colors along the scale.}

\item{x}{a vector whose values will be coerced to numbers and mapped to colors.}

\item{...}{passed to \code{\link{lightness_scale}}. Note that argument \code{domain} is meaningless in functions other than \code{lightness_scale} and passing it through \code{...} is an error.}

\item{n}{number of colors to extract from the color palette.}
}
\value{
\code{*_scale} and \code{*_palette} return a function.

\code{*_colors}, \code{*.colors}, and \code{*_map} return a vector of hex colors.
}
\description{
Lightness-based color scale and palette in HCL space.
}
\details{
In HCL space, the perceived color (hue) is completely separated from the perceived intensity (chromacity) and lightness of the color. This means that colors of various hues but same chromacity and lightness appear as the exact same grey when converted to black and white. This makes the HCL space particularly suitable to create good color palettes:
\itemize{
  \item For qualitative palettes (discrete variables): varying h at constant c and l avoids drawing attention to certain hues as it would happen if the same was done in HSV or HSL space. Indeed, some hues are perceived as brighter (yellow, light green, etc.), others as duller/darker (blues, etc.).
  \item For sequential palettes (continuous variables): varying l (or possibly c) for a constant h gives a sense of direction and avoid the many perceptual pitfalls typical of 'rainbow'-like scales.
}

The \code{*_scale} version creates a \strong{function} that takes a single argument (\code{x}: a numeric vector), maps the values to colors along an interpolated gradient and returns those colors as hex codes.

The \code{*_palette} version also creates a \strong{function}, but it takes an integer, \code{n}, as argument, picks \code{n} colors evenly spaced along the scale and returns them as hex codes.

The \code{*_colors} and \code{*.colors} versions are just shortcuts for \code{*_palette()(n)} and directly return \code{n} evenly spaced colors. They are equivalent to builtin functions such as \code{\link[grDevices]{heat.colors}}, \code{\link[grDevices]{topo.colors}}, etc.

The \code{*_map} version is also a shortcut, which automatically creates a scale that spans all values in its argument \code{x}, maps the content of \code{x} on that scale and returns the colors. It is particularly useful as the \code{col} argument of plotting functions.
}
\examples{
# Define a dark-to-light blue scale
blues_scale <- lightness_scale(h=220)
# and apply it to some data
blues_scale(x=c(0, 0.2, 0.6, 1))

# Define a palette function
# (which works like the actual rainbow() function)
blues_pal <- lightness_palette(h=220, c=0.3)
# and get 10 colors from it
blues_pal(n=10)
show_col(blues_pal(n=10))
# or use the shortcut
show_col(lightness_colors(n=50, h=220, c=0.3))

# Determine hue from a color
blues <- lightness_colors(n=50, h="dodgerblue")
greens <- lightness_colors(n=50, h="green")
yellows <- lightness_colors(n=50, h="gold")
pinks <- lightness_colors(n=50, h="deeppink")
show_col(blues, greens, yellows, pinks)

# Perceived lightness increases similarly no matter the hue
# which makes the different palettes comparable)
# (this would not be the case with a HSL or HSV gradient)
plot(  luminance(blues),   col=blues[40])
points(luminance(greens),  col=greens[40])
points(luminance(yellows), col=yellows[40])
points(luminance(pinks),   col=pinks[40])

# Lightness scales are good for continuous variables
# such as the elevation of the Maunga Whau volcano
x <- 10*(1:nrow(volcano))
y <- 10*(1:ncol(volcano))
image(x, y, volcano, col=lightness_colors(100, h=140))
contour(x, y, volcano, col=alpha("white", 0.5), add=T)

persp(x, y, volcano, theta=50, phi=25, border=alpha("black", 0.3),
      col=lightness_map(persp_facets(volcano), h=140))
\dontrun{
library("rgl")
persp3d(x, y, volcano, aspect=c(1,0.6,0.3), axes=FALSE, box=FALSE,
        col=lightness_map(volcano, h=140))
play3d(spin3d(axis=c(0, 0, 1), rpm=10), duration=6)
}

# With a limited number of levels, they can also work for a discrete variable
attach(iris)
plot(Petal.Length, Sepal.Length, pch=19, col=lightness_map(Species))
legend(1, 8, legend=levels(Species), pch=19, col=lightness_colors(n=nlevels(Species)))
# but a hue-based scale is probably more appropriate (see ?hue_map)

}
\seealso{
The \code{\link{hcl}} function, on which this one is based.

Other HCL-based palettes: \code{\link{hue_scale}}
}

