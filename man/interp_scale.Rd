% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scale_interp.R
\name{interp_scale}
\alias{interp_scale}
\alias{interp_map}
\alias{interp_palette}
\alias{interp_colors}
\title{Interpolated color scale and palette}
\usage{
interp_scale(colors = c("white", "black"), model = "lab",
  interp = "linear", domain = c(0, 1), reverse = FALSE, values = NULL,
  exact.until = 100)

interp_map(x, ...)

interp_palette(...)

interp_colors(n, ...)
}
\arguments{
\item{colors}{vector of colors specified as hex strings or named R colors. By default, those colors will be evenly distributed along the scale and new colors will be interpolated between them.}

\item{model}{color space in which to perform the interpolation; valid models are \code{lab} (the default and usually most suitable), \code{rgb}, \code{hsv}, \code{hsl}, \code{hcl}, \code{lch}. Beware that all but \code{lab} and \code{rgb} can give surprising results.}

\item{interp}{type of interpolation to perform; either \code{linear} (the default) or \code{bezier}, which results in a smoother transition between colors. \code{bezier} interpolation is only available with \code{model="lab"} however.}

\item{domain}{the values between which the scale is computed.}

\item{reverse}{whether to reverse the order of colors along the scale.}

\item{values}{if colours should not be evenly positioned along the gradient, this vector gives the position for each color in the \code{colors} vector. This argument supersedes \code{domain} and \code{reverse} because it defines the bounds and direction of the color scale.}

\item{exact.until}{integer, when more than \code{exact.until} colors need to be computed, a fast but not exact alternative algorithm is used. This should not make a difference unless the argument \code{values} is used and some transitions in color are sharp.}

\item{x}{a vector whose values will be coerced to numbers and mapped to colors.}

\item{...}{passed to \code{\link{interp_scale}}. Note that arguments \code{domain} and \code{values} are meaningless in functions other than \code{interp_scale} and passing them through \code{...} is an error.}

\item{n}{number of colors to extract from the color palette.}
}
\value{
\code{*_scale} and \code{*_palette} return a function.

\code{*_map} and \code{*_colors} return a vector of hex colors.
}
\description{
Interpolate between colors to create a color scale, map values to colors along a scale, create a color palette, or get a few colors from a palette.
}
\details{
As a user, the most useful functions are \code{*_map} and \code{*_colors}.

\code{*_scale} creates a \strong{function} that takes a single argument (\code{x}: a numeric vector), maps its values to colors, and returns those colors as hex codes.

\code{*_map} is a shortcut for \code{*_scale(domain=range(x))(x)}: it creates a scale that spans all values in its argument \code{x}, maps the content of \code{x} on that scale, and returns the colors. It is particularly useful as the \code{col} argument of plotting functions.

\code{*_palette} also creates a \strong{function}, but this one takes an integer (\code{n}) as argument, picks \code{n} colors evenly spaced along the scale, and returns them as hex codes.

\code{*_colors} is a shortcut for \code{*_palette()(n)} and directly returns \code{n} evenly spaced colors. It is equivalent to built-in functions such as \code{\link[grDevices]{heat.colors}}, \code{\link[grDevices]{topo.colors}}, etc.
}
\examples{
# Define a color scale
coldhot_scale <- interp_scale(c("cornflowerblue", "brown3"))
# Apply it to some data
coldhot_scale(c(0, 0.2, 0.6, 1))
# For values outside the range, the extreme color of scale is returned
coldhot_scale(1.3)

# Define a palette
coldhot_pal <- interp_palette(c("cornflowerblue", "brown3"))
# and get 10 colors from it
coldhot_pal(10)
show_col(coldhot_pal(10))
# Use the shortcut to define a palette and extract n colors from it
show_col(interp_colors(n=50, colors=c("cornflowerblue", "brown3")))

# Test interpolation spaces and types
cols <- c("yellow", "blue", "red")
show_col(
   interp_colors(10, cols, model="lab"),
   interp_colors(10, cols, model="lab", interp="bez"),
   interp_colors(10, cols, model="rgb"),
   interp_colors(10, cols, model="hsv"),
   interp_colors(10, cols, model="hcl")
)

# Change mapping region/direction
x <- 0:10
cols <- c("aliceblue", "cornflowerblue", "dodgerblue4")
show_col(
   interp_scale(cols)(x),
   interp_scale(cols, domain=range(x))(x),
   interp_scale(cols, domain=range(x), reverse=TRUE)(x),
   interp_scale(cols, values=c(0,1,10))(x)
)

# Maunga Whau volcano colors picked from a picture
# (likely incorrect perceptually but attempts a "realistic" look)
topo_colors <- c("#C4B99F", "#282A19", "#61781B", "#BC9352")
show_col(topo_colors)
image(maunga, col=interp_colors(100, colors=topo_colors))
# = the dark ring-like level is indeed misleading

persp(maunga, theta=50, phi=25, border=alpha("black", 0.3),
      col=interp_map(persp_facets(maunga$z), colors=topo_colors))

\dontrun{
library("rgl")
persp3d(maunga, aspect=c(1,0.6,0.3), axes=FALSE, box=FALSE,
        col=interp_map(maunga$z, colors=topo_colors))
play3d(spin3d(axis=c(0, 0, 1), rpm=10), duration=6)
}
# Color points according to a discrete variable
attach(iris)
plot(Petal.Length, Sepal.Length, pch=21, bg=interp_map(Species))
legend(1, 8, legend=levels(Species), pch=21, pt.bg=interp_colors(n=nlevels(Species)))
# NB: works, but a continuous scale is not really appropriate here.

}
\seealso{
Other color scales and palettes: \code{\link{brewer_scale}},
  \code{\link{chroma_scale}},
  \code{\link{cubehelix_scale}}, \code{\link{etopo_scale}},
  \code{\link{hue_scale}}, \code{\link{inferno_scale}},
  \code{\link{light_scale}}, \code{\link{magma_scale}},
  \code{\link{plasma_scale}}, \code{\link{viridis_scale}}
}
