% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scales.R
\name{make_scale}
\alias{make.colors}
\alias{make_colors}
\alias{make_map}
\alias{make_palette}
\alias{make_scale}
\title{Color scales and palettes}
\usage{
make_scale(colors = c("white", "black"), model = "lab", interp = "linear",
  domain = c(0, 1), reverse = FALSE, values = NULL)

make_palette(...)

make_colors(n, ...)

make.colors(n, ...)

make_map(x, ...)
}
\arguments{
\item{colors}{vector of colors specified as hex strings or named R colors. By default, those colors will be evenly distributed along the scale and new colors will be interpolated between them.}

\item{model}{color space in which to perform the interpolation; valid models are \code{lab} (the default and usually most suitable), \code{rgb}, \code{hsv}, \code{hsl}, \code{hcl}, \code{lch}. Beware that all but \code{lab} and \code{rgb} can give surprising results.}

\item{interp}{type of interpolation to perform; either \code{linear} (the default) or \code{bezier}, which results in a smoother transition between colors. \code{bezier} interpolation is only available with \code{model="lab"} however.}

\item{domain}{the values between which the scale is computed.}

\item{reverse}{whether to reverse the order of colors along the scale.}

\item{values}{if colours should not be evenly positioned along the gradient this vector gives the position for each color in the \code{colors} vector. This argument supersedes \code{domain} and \code{reverse} because it defines the bounds and direction of the color scale.}

\item{...}{passed to \code{\link{make_scale}}. Note that arguments \code{domain} and \code{values} are meaningless in functions other than \code{make_scale} and passing them through \code{...} is an error.}

\item{n}{number of colors to extract from the color palette.}

\item{x}{a vector whose values will be coerced to numbers and mapped to colors.}
}
\value{
\code{*_scale} and \code{*_palette} return a function.

\code{*_colors}, \code{*.colors}, and \code{*_map} return a vector of hex colors.
}
\description{
Create a color scale, create a color palette, get a few colors from a palette, or map values to colors along a scale.
}
\details{
The \code{*_scale} version creates a \strong{function} that takes a single argument (\code{x}: a numeric vector), maps the values to colors along an interpolated gradient and returns those colors as hex codes.

The \code{*_palette} version also creates a \strong{function}, but it takes an integer, \code{n}, as argument, picks \code{n} colors evenly spaced along the scale and returns them as hex codes.

The \code{*_colors} and \code{*.colors} versions are just shortcuts for \code{*_palette()(n)} and directly return \code{n} evenly spaced colors. They are equivalent to builtin functions such as \code{\link[grDevices]{heat.colors}}, \code{\link[grDevices]{topo.colors}}, etc.

The \code{*_map} version is also a shortcut, which automatically creates a scale that spans all values in its argument \code{x}, maps the content of \code{x} on that scale and returns the colors. It is particularly useful as the \code{col} argument of plotting functions.
}
\examples{
# define a color scale
coldhot_scale <- make_scale(c("cornflowerblue", "brown3"))
# apply it to some data
coldhot_scale(c(0, 0.2, 0.6, 1))
# for values outside the range, the extreme color of scale is returned
coldhot_scale(1.3)

# define a palette
coldhot_pal <- make_palette(c("cornflowerblue", "brown3"))
# get 10 colors from it
coldhot_pal(10)
show_col(coldhot_pal(10))

# shortcut to define a palette and extract n colors from it
show_col(make.colors(n=50, colors=c("cornflowerblue", "brown3")))

# test interpolation spaces and types
cols <- c("yellow", "blue", "red")
show_col(
   make_palette(cols, model="lab")(10),
   make_palette(cols, model="lab", interp="bez")(10),
   make_palette(cols, model="rgb")(10),
   make_palette(cols, model="hsv")(10),
   make_palette(cols, model="hcl")(10)
)

# change mapping
x <- 0:10
cols <- c("aliceblue", "cornflowerblue", "dodgerblue4")
show_col(
   make_scale(cols)(x),
   make_scale(cols, domain=range(x))(x),
   make_scale(cols, domain=range(x), reverse=TRUE)(x),
   make_scale(cols, values=c(0,1,10))(x)
)

# Maunga Whau volcano colors picked from a picture
# (likely incorrect perceptually but looks "realistic")
maunga <- c("#C4B99F", "#282A19", "#61781B", "#BC9352")
x <- 10*(1:nrow(volcano))
y <- 10*(1:ncol(volcano))

image(x, y, volcano, col=make_colors(100, colors=maunga))

persp(x, y, volcano, theta=60, phi=25,
      col=make_map(volcano[-1,-1], colors=maunga))
# NB: This is cheating, colouring each facet according to the value of
#     its lower right point. The correct way is \\code{link{persp_facets}}
persp(x, y, volcano, theta=60, phi=25,
      col=make_map(persp_facets(volcano), colors=maunga))

\dontrun{
library("rgl")
persp3d(x, y, volcano, aspect=c(1,0.6,0.3), axes=FALSE, box=FALSE,
        col=make_map(volcano, colors=maunga))

}
# color points according to a discrete variable
attach(iris)
plot(Petal.Length, Sepal.Length, pch=21, cex=2, bg=make_map(Species))
legend(1, 8, legend=levels(Species), pch=21, pt.bg=make_colors(n=nlevels(Species)))
# NB: works, but a continuous scale is not really appropriate here.

}
\seealso{
Other color scales and palettes: \code{\link{brewer_scale}}
}

