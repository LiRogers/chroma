% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scale_hue.R
\name{hue_scale}
\alias{hue.colors}
\alias{hue_colors}
\alias{hue_map}
\alias{hue_palette}
\alias{hue_scale}
\title{Hue scale and palette}
\usage{
hue_scale(h = c(0, 360) + 40, c = 0.65, l = 0.65, domain = c(0, 1),
  reverse = FALSE)

hue_map(x, ...)

hue_palette(n, ...)

hue_colors(n, ...)

hue.colors(n, ...)
}
\arguments{
\item{h}{hue, either an angle around the color wheel, in \code{[0, 360]} (angles outside of the range are rotated back to within \code{[0, 360]}: 380 = 20, -15 = 345, etc.), or a color (hex or named) from which the hue is extracted (by function \code{\link{hue}}).}

\item{c}{chromacity, number in \code{[0, ~1]}; 0 is grey, ~1 is full color.}

\item{l}{lightness, number in \code{[0, 1]}; 0 is darkest, 1 is brightest.}

\item{domain}{the values between which the scale is computed.}

\item{reverse}{whether to reverse the order of colors along the scale.}

\item{x}{a vector whose values will be coerced to numbers and mapped to colors.}

\item{...}{passed to \code{\link{hue_scale}}. Note that argument \code{domain} is meaningless in functions other than \code{hue_scale} and passing it through \code{...} is an error.}

\item{n}{number of colors to extract from the color palette.}
}
\value{
\code{*_scale} and \code{*_palette} return a function.

\code{*_map}, \code{*_colors}, and \code{*.colors} return a vector of hex colors.
}
\description{
Hue-based color scale and palette in HCL space.
}
\details{
In HCL space, the perceived color (hue) is completely separated from the perceived intensity (chromacity) and lightness of the color. This means that colors of various hues but same chromacity and lightness appear as the exact same grey when converted to greyscale. This makes the HCL space particularly suitable to create good color palettes:
\itemize{
  \item For qualitative palettes (discrete variables): varying \code{h} at constant \code{c} and \code{l} avoids drawing attention to certain hues, as would happen if the same was done in HSV or HSL space. Indeed, some hues are perceived as brighter (yellow, light green, etc.), others as duller/darker (blues, etc.).
  \item For sequential palettes (continuous variables): varying \code{l} (or possibly \code{c}) for a constant \code{h} gives a sense of direction and avoid the many perceptual pitfalls typical of 'rainbow'-like scales.
}

The \code{*_scale} version creates a \strong{function} that takes a single argument (\code{x}: a numeric vector), maps the values to colors along an interpolated gradient and returns those colors as hex codes.

The \code{*_map} version is a shortcut for \code{*_scale(domain=range(x))(x)}: it creates a scale that spans all values in its argument \code{x}, maps the content of \code{x} on that scale and returns the colors. It is particularly useful as the \code{col} argument of plotting functions.

The \code{*_palette} version also creates a \strong{function}, but this one takes an integer (\code{n}) as argument, picks \code{n} colors evenly spaced along the scale and returns them as hex codes.

The \code{*_colors} and \code{*.colors} versions are shortcuts for \code{*_palette()(n)} and directly return \code{n} evenly spaced colors. They are equivalent to built-in functions such as \code{\link[grDevices]{heat.colors}}, \code{\link[grDevices]{topo.colors}}, etc.
}
\examples{
# Define a perceptually-correct "rainbow"-like scale function
rainbow_scale <- hue_scale()
# and apply it to some data
rainbow_scale(x=c(0, 0.2, 0.6, 1))

# Define a palette function
# (which works like the actual rainbow() function)
rainbow_pal <- hue_palette()
# and get 10 colors from it
rainbow_pal(n=10)
show_col(rainbow_pal(n=10))
# or use the shortcut
hue_colors(n=50)
show_col(hue_colors(n=50))

# Palettes of varying hue but constant chromacity and lightness
# are appropriate to distinguish among levels of a discrete variable
attach(iris)
plot(Petal.Length, Sepal.Length, pch=19, col=hue_map(Species))
legend(1, 8, legend=levels(Species), pch=19, col=hue_colors(n=nlevels(Species)))

# Try on the elevation map of the Maunga Whau volcano
x <- 10*(1:nrow(volcano))
y <- 10*(1:ncol(volcano))
image(x, y, volcano, col=hue_colors(100))
# = typical rainbow scales bullseye effect, yuk!

# Hue based scales may work, but with a limited range of hues
image(x, y, volcano, col=hue_colors(100, h=c(240,350), c=0.5))
contour(x, y, volcano, col=alpha("white", 0.5), add=TRUE)

persp(x, y, volcano, theta=50, phi=25, border=alpha("black", 0.3),
      col=hue_map(persp_facets(volcano), h=c(240,350), c=0.5))
# Still, lightness (or chromacity)-based scales are likely to be better...

}
\seealso{
The \code{\link{hcl}} function, on which this one is based.

Other color scales and palettes: \code{\link{brewer_scale}},
  \code{\link{chroma_scale}}, \code{\link{color_scale}},
  \code{\link{inferno_scale}}, \code{\link{light_scale}},
  \code{\link{magma_scale}}, \code{\link{plasma_scale}},
  \code{\link{viridis_scale}}

Other HCL-based scales: \code{\link{chroma_scale}},
  \code{\link{light_scale}}
}

